{"meta":{"title":"KD blog","subtitle":null,"description":null,"author":"kingdee","url":"https://kingdee88.github.io"},"pages":[],"posts":[{"title":"以上版本「高清」方案设置","slug":"以上版本「高清」方案设置","date":"2017-02-09T00:38:52.000Z","updated":"2017-02-09T00:49:08.000Z","comments":true,"path":"2017/02/09/以上版本「高清」方案设置/","link":"","permalink":"https://kingdee88.github.io/2017/02/09/以上版本「高清」方案设置/","excerpt":"","text":"何为高清高清就是在高清屏的手机上，1px实际显示的物理像素不为1，到时页面显示是会有1px的像素偏差，尤其是边框，比较影响页面的显示效果 • 用脚本设置 html 的 viewport （不要再写 html meta 标签去设置 viewport）：在 html > head 里 &lt;!DOCTYPE html&gt; title /* 高清方案脚本 / 拷贝引入以下高清方案脚本，请内联写到所有 css 引用之前, 否则部分安卓机有问题（此脚本内部称为flex高清模式，支持任意等比缩放、兼容性好，其中原理请自己探索）： !function(e){function t(a){if(i[a])return i[a].exports;var n=i[a]={exports:{},id:a,loaded:!1};return e[a].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var i={};return t.m=e,t.c=i,t.p=&quot;&quot;,t(0)}([function(e,t){&quot;use strict&quot;;Object.defineProperty(t,&quot;__esModule&quot;,{value:!0});var i=window;t[&quot;default&quot;]=i.flex=function(e,t){var a=e||100,n=t||1,r=i.document,o=navigator.userAgent,d=o.match(/Android[\\S\\s]+AppleWebkit\\/(\\d{3})/i),l=o.match(/U3\\/((\\d+|\\.){5,})/i),c=l&amp;&amp;parseInt(l[1].split(&quot;.&quot;).join(&quot;&quot;),10)&gt;=80,p=navigator.appVersion.match(/(iphone|ipad|ipod)/gi),s=i.devicePixelRatio||1;p||d&amp;&amp;d[1]&gt;534||c||(s=1);var u=1/s,m=r.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);m||(m=r.createElement(&quot;meta&quot;),m.setAttribute(&quot;name&quot;,&quot;viewport&quot;),r.head.appendChild(m)),m.setAttribute(&quot;content&quot;,&quot;width=device-width,user-scalable=no,initial-scale=&quot;+u+&quot;,maximum-scale=&quot;+u+&quot;,minimum-scale=&quot;+u),r.documentElement.style.fontSize=a/2*s*n+&quot;px&quot;},e.exports=t[&quot;default&quot;]}]); flex(100, 1); 附未压缩的源码链接 • 『新项目忽略』在已有的未做类似高清方案的项目 less 文件中对 px 单位做 2 倍处理，可以使用 gulp 脚本（如果不是使用 gulp，则推荐使用 webpack，相应配置方法见下条），在 gulpfile.js 加入以下代码： var gulp = require(‘gulp’); var replace = require(‘gulp-replace’); var gulpif = require(‘gulp-if’); var exec = require(‘child_process’).exec; var srcFiles = [ &apos;./src/**/*.less&apos; ]; gulp.task(‘doublepx’, function(done){ gulp.src(srcFiles) .pipe(gulpif(true, replace(/[&apos;&quot;](\\d+)px[&apos;&quot;]|\\b(\\d+)px\\b/g, function(pixel) { console.log(pixel, &apos;=&gt;&apos;, ( parseInt(pixel) * 2 ) + &apos;px&apos;); if ( /&apos;|&quot;/.test(pixel) || &apos;0px&apos;== pixel || &apos;1px&apos; == pixel) { return pixel; } return ( parseInt(pixel) * 2 ) + &apos;px&apos;; }))) .pipe(gulp.dest(&apos;./src&apos;)); done(); }); gulp.task(‘default’, [‘doublepx’]); • 随后新的样式值都写成和视觉稿上标注的值（视觉稿标注一般以设备物理点为单位，像 iPhone6 屏幕 750 的宽度）一样即可。 • 对于使用 webpack 的项目，在webpack.config.js里新增pxtorem配置、代码如下： const pxtorem = require(‘postcss-pxtorem’); webpackConfig.postcss.push(pxtorem({ rootValue: 100, propWhiteList: [], })); • 至此，高清方案设置完毕（过程中相关依赖请自行npm install）。","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://kingdee88.github.io/tags/前端/"},{"name":"效率","slug":"效率","permalink":"https://kingdee88.github.io/tags/效率/"},{"name":"移动","slug":"移动","permalink":"https://kingdee88.github.io/tags/移动/"}]},{"title":"gulp和webpack的完美结合","slug":"gulp和webpack的完美结合","date":"2017-02-07T07:29:31.000Z","updated":"2017-02-07T07:45:15.000Z","comments":true,"path":"2017/02/07/gulp和webpack的完美结合/","link":"","permalink":"https://kingdee88.github.io/2017/02/07/gulp和webpack的完美结合/","excerpt":"","text":"gulp来实现实时监控文件的变化以及css相关处理webpack则处理js 包依赖(package.json){ &quot;name&quot;: &quot;gulp-temp&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: { &quot;babel-core&quot;: &quot;^6.21.0&quot;, &quot;babel-loader&quot;: &quot;^6.2.10&quot;, &quot;babel-preset-es2015&quot;: &quot;^6.18.0&quot;, &quot;gulp&quot;: &quot;^3.9.1&quot;, &quot;gulp-autoprefixer&quot;: &quot;^3.1.1&quot;, &quot;gulp-concat&quot;: &quot;^2.6.1&quot;, &quot;gulp-cssnano&quot;: &quot;^2.1.2&quot;, &quot;gulp-less&quot;: &quot;^3.3.0&quot;, &quot;gulp-plumber&quot;: &quot;^1.1.0&quot;, &quot;gulp-postcss&quot;: &quot;^6.2.0&quot;, &quot;gulp-rename&quot;: &quot;^1.2.2&quot;, &quot;gulp-uglify&quot;: &quot;^2.0.0&quot;, &quot;gulp-webpack&quot;: &quot;^1.5.0&quot;, &quot;postcss-px2rem&quot;: &quot;^0.3.0&quot;, &quot;webpack&quot;: &quot;^1.14.0&quot; } } 配置文件const gulp = require(&apos;gulp&apos;); const rename = require(&apos;gulp-rename&apos;); const cssnano = require(&apos;gulp-cssnano&apos;); const less = require(&apos;gulp-less&apos;); const concat = require(&apos;gulp-concat&apos;); const autoprefixer= require(&apos;gulp-autoprefixer&apos;); const postcss = require(&apos;gulp-postcss&apos;); const px2rem= require(&apos;postcss-px2rem&apos;); var webpack = require(&apos;gulp-webpack&apos;); var webpackConfig = require(&apos;./webpack.config.js&apos;) gulp.task(&apos;handelCSS&apos;, function(){ return gulp.src(&apos;app/css/*.less&apos;) .pipe(less()) .pipe(postcss([px2rem({remUnit: 64})])) .pipe(autoprefixer({ browsers: [ &apos;&gt;5%&apos;], cascade: false, //是否美化属性值 默认：true 像这样： //-webkit-transform: rotate(45deg); // transform: rotate(45deg); remove:true //是否去掉不必要的前缀 默认：true })) .pipe(concat(&apos;app.css&apos;)) .pipe(gulp.dest(&apos;dist/css&apos;)) .pipe(cssnano()) .pipe(rename(function(path){ path.basename += &apos;.min&apos;; })) .pipe(gulp.dest(&apos;dist/css&apos;)); }) gulp.task(&apos;html&apos;, function() { return gulp.src(&apos;app/*.html&apos;) // 指明源文件路径、并进行文件匹配 .pipe(gulp.dest(&apos;dist&apos;)); // 输出路径 }); gulp.task(&apos;handelJS&apos;, function(){ return gulp.src(&apos;app/js/*.js&apos;) .pipe(webpack( webpackConfig ))//重点 .pipe(gulp.dest(&apos;dist/&apos;)) }) // 监视文件变化，自动执行任务 gulp.task(&apos;watch&apos;, function(){ gulp.watch(&apos;app/*.html&apos;, [&apos;html&apos;]); gulp.watch(&apos;app/css/*.less&apos;, [&apos;handelCSS&apos;]); gulp.watch(&apos;app/js/*.js&apos;, [&apos;handelJS&apos;]); }) gulp.task(&apos;start&apos;, [&apos;handelJS&apos;, &apos;handelCSS&apos;, &apos;html&apos;]); gulp.task(&apos;default&apos;,[&apos;start&apos;,&apos;watch&apos;]); webpack.config.jsconst path = require(&apos;path&apos;); const webpack = require(&apos;webpack&apos;); const ROOT_PATH = path.resolve(__dirname); const APP_PATH = path.resolve(ROOT_PATH, &apos;app&apos;); const BUILD_PATH = path.resolve(ROOT_PATH, &apos;dist&apos;); module.exports = { entry: { app:APP_PATH+&apos;/js/index.js&apos;, }, output: { path: BUILD_PATH, publicPath: &quot;./&quot;, filename: &apos;bundle.js&apos; }, plugins: [ // new CleanPlugin(&apos;build&apos;), new webpack.optimize.UglifyJsPlugin({ compressor: { warnings: false, }, sourceMap: true, except: [&apos;$super&apos;, &apos;$&apos;, &apos;exports&apos;, &apos;require&apos;] //排除关键字 }), new webpack.optimize.OccurenceOrderPlugin(), ], module: { loaders: [ { test: /\\.jsx?$/, exclude: /(node_modules|bower_components)/, loader: &apos;babel&apos;, query: { presets: [ &apos;es2015&apos;] }, }] } }","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://kingdee88.github.io/tags/前端/"},{"name":"工具","slug":"工具","permalink":"https://kingdee88.github.io/tags/工具/"}]},{"title":"H5项目常见问题汇总及解决方案","slug":"H5项目常见问题汇总及解决方案","date":"2017-02-07T05:39:03.000Z","updated":"2017-02-07T06:10:12.000Z","comments":true,"path":"2017/02/07/H5项目常见问题汇总及解决方案/","link":"","permalink":"https://kingdee88.github.io/2017/02/07/H5项目常见问题汇总及解决方案/","excerpt":"","text":"Meta基础知识： H5页面窗口自动调整到设备宽度，并禁止用户缩放页面 1234567891011121314151617181920212223//一、HTML页面结构&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\" /&gt;// width 设置viewport宽度，为一个正整数，或字符串‘device-width’// height 设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置// initial-scale 默认缩放比例，为一个数字，可以带小数// minimum-scale 允许用户最小缩放比例，为一个数字，可以带小数// maximum-scale 允许用户最大缩放比例，为一个数字，可以带小数// user-scalable 是否允许手动缩放//二、JS动态判断var phoneWidth = parseInt(window.screen.width);var phoneScale = phoneWidth/640;var ua = navigator.userAgent;if (/Android (\\d+\\.\\d+)/.test(ua))&#123; var version = parseFloat(RegExp.$1); if(version&gt;2.3)&#123; document.write('&lt;meta name=\"viewport\" content=\"width=640, minimum-scale = '+phoneScale+', maximum-scale = '+phoneScale+', target-densitydpi=device-dpi\"&gt;'); &#125;else&#123; document.write('&lt;meta name=\"viewport\" content=\"width=640, target-densitydpi=device-dpi\"&gt;'); &#125;&#125; else &#123; document.write('&lt;meta name=\"viewport\" content=\"width=640, user-scalable=no, target-densitydpi=device-dpi\"&gt;');&#125; 空白页基本meta标签 12345678&lt;!-- 设置缩放 --&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no, minimal-ui\" /&gt;&lt;!-- 可隐藏地址栏，仅针对IOS的Safari（注：IOS7.0版本以后，safari上已看不到效果） --&gt;&lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /&gt;&lt;!-- 仅针对IOS的Safari顶端状态条的样式（可选default/black/black-translucent ） --&gt;&lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" /&gt;&lt;!-- IOS中禁用将数字识别为电话号码/忽略Android平台中对邮箱地址的识别 --&gt;&lt;meta name=\"format-detection\"content=\"telephone=no, email=no\" /&gt; 其他meta标签 12345678910111213141516171819202122&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;&lt;meta name=\"renderer\" content=\"webkit\"&gt;&lt;!-- 避免IE使用兼容模式 --&gt;&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;&lt;meta name=\"HandheldFriendly\" content=\"true\"&gt;&lt;!-- 微软的老式浏览器 --&gt;&lt;meta name=\"MobileOptimized\" content=\"320\"&gt;&lt;!-- uc强制竖屏 --&gt;&lt;meta name=\"screen-orientation\" content=\"portrait\"&gt;&lt;!-- QQ强制竖屏 --&gt;&lt;meta name=\"x5-orientation\" content=\"portrait\"&gt;&lt;!-- UC强制全屏 --&gt;&lt;meta name=\"full-screen\" content=\"yes\"&gt;&lt;!-- QQ强制全屏 --&gt;&lt;meta name=\"x5-fullscreen\" content=\"true\"&gt;&lt;!-- UC应用模式 --&gt;&lt;meta name=\"browsermode\" content=\"application\"&gt;&lt;!-- QQ应用模式 --&gt;&lt;meta name=\"x5-page-mode\" content=\"app\"&gt;&lt;!-- windows phone 点击无高光 --&gt;&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt; 常见问题： 移动端如何定义字体font-family 1234567891011121314151617@ --------------------------------------中文字体的英文名称@ 宋体 SimSun@ 黑体 SimHei@ 微信雅黑 Microsoft Yahei@ 微软正黑体 Microsoft JhengHei@ 新宋体 NSimSun@ 新细明体 MingLiU@ 细明体 MingLiU@ 标楷体 DFKai-SB@ 仿宋 FangSong@ 楷体 KaiTi@ 仿宋_GB2312 FangSong_GB2312@ 楷体_GB2312 KaiTi_GB2312 @@ 说明：中文字体多数使用宋体、雅黑，英文用Helvetica body &#123; font-family: Microsoft Yahei,SimSun,Helvetica; &#125; 打电话发短信写邮件怎么实现 1234567891011121314151617181920212223242526// 一、打电话&lt;a href=\"tel:0755-10086\"&gt;打电话给:0755-10086&lt;/a&gt; // 二、发短信，winphone系统无效&lt;a href=\"sms:10086\"&gt;发短信给: 10086&lt;/a&gt; // 三、写邮件//注：在添加这些功能时，第一个功能以\"?\"开头，后面的以\"&amp;\"开头//1.普通邮件&lt;a href=\"mailto:863139978@qq.com\"&gt;点击我发邮件&lt;/a&gt;//2.收件地址后添加?cc=开头，可添加抄送地址（Android存在兼容问题）&lt;a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net\"&gt;点击我发邮件&lt;/a&gt;//3.跟着抄送地址后，写上&amp;bcc=,可添加密件抄送地址（Android存在兼容问题）&lt;a href=\"mailto:863139978@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=384900096@qq.com\"&gt;点击我发邮件&lt;/a&gt;//4.包含多个收件人、抄送、密件抄送人，用分号(;)隔开多个邮件人的地址&lt;a href=\"mailto:863139978@qq.com;384900096@qq.com\"&gt;点击我发邮件&lt;/a&gt;//5.包含主题，用?subject=&lt;a href=\"mailto:863139978@qq.com?subject=邮件主题\"&gt;点击我发邮件&lt;/a&gt;//6.包含内容，用?body=;如内容包含文本，使用%0A给文本换行 &lt;a href=\"mailto:863139978@qq.com?body=邮件主题内容%0A腾讯诚信%0A期待您的到来\"&gt;点击我发邮件&lt;/a&gt;//7.内容包含链接，含http(s)://等的文本自动转化为链接&lt;a href=\"mailto:863139978@qq.com?body=http://www.baidu.com\"&gt;点击我发邮件&lt;/a&gt;//8.内容包含图片（PC不支持）&lt;a href=\"mailto:863139978@qq.com?body=&lt;img src='images/1.jpg' /&gt;\"&gt;点击我发邮件&lt;/a&gt;//9.完整示例&lt;a href=\"mailto:863139978@qq.com;384900096@qq.com?cc=zhangqian0406@yeah.net&amp;bcc=993233461@qq.com&amp;subject=[邮件主题]&amp;body=腾讯诚邀您参与%0A%0Ahttp://www.baidu.com%0A%0A&lt;img src='images/1.jpg' /&gt;\"&gt;点击我发邮件&lt;/a&gt; 移动端touch事件（区分webkit和winphone） 123456789101112131415161718192021222324/* 当用户手指放在移动设备在屏幕上滑动会触发的touch事件 */// 以下支持webkittouchstart——当手指触碰屏幕时候发生。不管当前有多少只手指touchmove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用event的preventDefault()可以阻止默认情况的发生：阻止页面滚动touchend——当手指离开屏幕时触发touchcancel——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面alert()一个提示框，此时会触发该事件，这个事件比较少用 //TouchEvent说明：touches：屏幕上所有手指的信息targetTouches：手指在目标区域的手指信息changedTouches：最近一次触发该事件的手指信息touchend时，touches与targetTouches信息会被删除，changedTouches保存的最后一次的信息，最好用于计算手指信息 //参数信息(changedTouches[0])clientX、clientY在显示区的坐标target：当前元素 //事件响应顺序ontouchstart &gt; ontouchmove &gt; ontouchend &gt; onclick // 以下支持winphone 8MSPointerDown——当手指触碰屏幕时候发生。不管当前有多少只手指MSPointerMove——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用css的html&#123;-ms-touch-action: none;&#125;可以阻止默认情况的发生：阻止页面滚动MSPointerUp——当手指离开屏幕时触发 移动端click屏幕产生200-300ms的延时响应 123456789101112说明：移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。 以下是历史原因，来源一个公司内一个同事的分享：2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。 双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。 原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=\"#\"&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。 //解决方案：fastclick可以解决在手机上点击事件的300ms延迟zepto的touch模块，tap事件也是为了解决在click的延迟问题 Rentina显示屏原理及设计方案 说明：retina屏是一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的retina显示屏中，像素点1个变为4个。 在高清显示屏中的位图被放大，图片会变得模糊，因此移动端的视觉稿通常会设计为传统PC的2倍。 那么，前端的应对方案是：设计稿切出来的图片长宽保证为偶数，并使用backgroud-size把图片缩小为原来的1/2 12345678910111213//例如图片宽高为：200px*200px，那么写法如下.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;//其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px.css&#123;font-size:20px&#125; //image-set设计Rentina背景图image-set,webkit私有属性，也是CSS4的属性，为解决Rentina屏幕下的图像而生。.css &#123; background: url(images/bg.jpg) no-repeat center; background: -webkit-image-set( url(images/bg.jpg) 1x, //支持image-set普通屏 url(images/bg-2x.jpg) 2x); //支持image-set的Rentinan&#125; 点击元素产生背景或边框怎么去掉 123456789101112/ios用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置-webkit-tap-highlight-color的alpha值为0去除灰色半透明遮罩；//android用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置-webkit-tap-highlight-color的alpha值为0去除部分机器自带的效果；//winphone系统,点击标签产生的灰色半透明背景，能通过设置&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;去掉；//特殊说明：有些机型去除不了，如小米2。对于按钮类还有个办法，不使用a或者input标签，直接用div标签a,button,input,textarea &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); -webkit-user-modify:read-write-plaintext-only; //-webkit-user-modify有个副作用，就是输入法不再能够输入多个字符&#125; // 也可以 * &#123; -webkit-tap-highlight-color: rgba(0,0,0,0); &#125;//winphone下&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt; 美化表单元素 123456789101112131415//一、使用appearance改变webkit浏览器的默认外观input,select &#123; -webkit-appearance:none; appearance: none; &#125; //二、winphone下，使用伪元素改变表单元素默认外观//1.禁用select默认箭头，::-ms-expand修改表单控件下拉箭头，设置隐藏并使用背景图片来修饰select::-ms-expand &#123; display:none; &#125; //2.禁用radio和checkbox默认样式，::-ms-check修改表单复选框或单选框默认图标，设置隐藏并使用背景图片来修饰input[type=radio]::-ms-check,input[type=checkbox]::-ms-check &#123; display:none; &#125;//3.禁用pc端表单输入框默认清除按钮，::-ms-clear修改清除按钮，设置隐藏并使用背景图片来修饰input[type=text]::-ms-clear,input[type=tel]::-ms-clear,input[type=number]::-ms-clear &#123; display:none; &#125; 移动端字体单位font-size选择px还是rem 1234567891011121314151617181920212223242526272829303132333435363738// 如需适配多种移动设备，建议使用rem。以下为参考值：html &#123; font-size: 62.5%; &#125; //10*16 = 62.5%//设置12px字体 这里注意在rem前要加上对应的px值，解决不支持rem的浏览器的兼容问题，做到优雅降级body &#123; font-size:12px; font-size:1.2rem; &#125; 超实用的CSS样式//去掉webkit的滚动条——display: none;//其他参数::-webkit-scrollba //滚动条整体部分::-webkit-scrollbar-thumb //滚动条内的小方块::-webkit-scrollbar-track //滚动条轨道::-webkit-scrollbar-button //滚动条轨道两端按钮::-webkit-scrollbar-track-piece //滚动条中间部分，内置轨道::-webkit-scrollbar-corner //边角，两个滚动条交汇处::-webkit-resizer //两个滚动条的交汇处上用于通过拖动调整元素大小的小控件 // 禁止长按链接与图片弹出菜单a,img &#123; -webkit-touch-callout: none &#125; // 禁止ios和android用户选中文字html,body &#123;-webkit-user-select:none; user-select: none; &#125; // 改变输入框placeholder的颜色值::-webkit-input-placeholder &#123; /* WebKit browsers */color: #999; &#125;:-moz-placeholder &#123; /* Mozilla Firefox 4 to 18 */color: #999; &#125;::-moz-placeholder &#123; /* Mozilla Firefox 19+ */color: #999; &#125;:-ms-input-placeholder &#123; /* Internet Explorer 10+ */color: #999; &#125;input:focus::-webkit-input-placeholder&#123; color:#999; &#125; // android上去掉语音输入按钮input::-webkit-input-speech-button &#123;display: none&#125; // 阻止windows Phone的默认触摸事件/*说明：winphone下默认触摸事件事件使用e.preventDefault是无效的，可通过样式来禁用，如：*/html &#123; -ms-touch-action:none; &#125; //禁止winphone默认触摸事件 *取消input在ios下，输入的时候英文首字母的默认大写1&lt;input autocapitalize=\"off\" autocorrect=\"off\" /&gt; 手机拍照和上传图片123//IOS有拍照、录像、选取本地图片功能，部分Android只有选择本地图片功能。Winphone不支持&lt;input type=\"file\" accept=\"images/*\" /&gt;&lt;input type=\"file\" accept=\"video/*\" /&gt; *屏幕旋转的事件和样式1234567891011121314151617181920//JS处理function orientInit()&#123; var orientChk = document.documentElement.clientWidth &gt; document.documentElement.clientHeight?'landscape':'portrait'; if(orientChk =='lapdscape')&#123; //这里是横屏下需要执行的事件 &#125;else&#123; //这里是竖屏下需要执行的事件 &#125;&#125; orientInit();window.addEventListener('onorientationchange' in window?'orientationchange':'resize', function()&#123; setTimeout(orientInit, 100);&#125;,false) //CSS处理//竖屏时样式@media all and (orientation:portrait)&#123; &#125;//横屏时样式@media all and (orientation:landscape)&#123; &#125; *audio元素和video元素在ios和andriod中无法自动播放1234567891011121314151617181920212223//音频，写法一&lt;audio src=\"music/bg.mp3\" autoplay loop controls&gt;你的浏览器还不支持哦&lt;/audio&gt; //音频，写法二&lt;audio controls=\"controls\"&gt; &lt;source src=\"music/bg.ogg\" type=\"audio/ogg\"&gt;&lt;/source&gt; &lt;source src=\"music/bg.mp3\" type=\"audio/mpeg\"&gt;&lt;/source&gt; 优先播放音乐bg.ogg，不支持在播放bg.mp3&lt;/audio&gt; //JS绑定自动播放（操作window时，播放音乐）$(window).one('touchstart', function()&#123; music.play();&#125;) //微信下兼容处理document.addEventListener(\"WeixinJSBridgeReady\", function () &#123; music.play();&#125;, false); //小结//1.audio元素的autoplay属性在IOS及Android上无法使用，在PC端正常//2.audio元素没有设置controls时，在IOS及Android会占据空间大小，而在PC端Chrome是不会占据任何空间 重力感应事件123456789101112131415161718192021222324// 运用HTML5的deviceMotion，调用重力感应事件if(window.DeviceMotionEvent)&#123; document.addEventListener('devicemotion', deviceMotionHandler, false)&#125; var speed = 30;var x = y = z = lastX = lastY = lastZ = 0;function deviceMotionHandler(eventData)&#123; var acceleration = event.accelerationIncludingGravity; x = acceleration.x; y = acceleration.y; z = acceleration.z; if(Math.abs(x-lastX)&gt;speed || Math.abs(y-lastY)&gt;speed || Math.abs(z-lastZ)&gt;speed )&#123; //这里是摇动后要执行的方法 yaoAfter(); &#125; lastX = x; lastY = y; lastZ = z;&#125; function yaoAfter()&#123; //do something&#125; *微信浏览器用户调整字体大小后页面矬了，怎么阻止用户调整123456789101112131415161718192021//以下代码可使Android机页面不再受用户字体缩放强制改变大小，但是会有1S左右延时，期间可以考虑loading来处理if (typeof(WeixinJSBridge) == \"undefined\") &#123; document.addEventListener(\"WeixinJSBridgeReady\", function (e) &#123; setTimeout(function()&#123; WeixinJSBridge.invoke('setFontSizeCallback', &#123; 'fontSize':0&#125;, function(res)&#123; alert(JSON.stringify(res)); &#125;) &#125;, 0) &#125;);&#125;else&#123; setTimeout(function()&#123; WeixinJSBridge.invoke('setFontSizeCallback', &#123; 'fontSize':0&#125;, function(res)&#123; alert(JSON.stringify(res)); &#125;) &#125;, 0) &#125; //IOS下可使用 -webkit-text-size-adjust禁止用户调整字体大小body &#123; -webkit-text-size-adjust:100%!important; &#125; //最好的解决方案：最好使用rem或百分比布局 定位的坑 1234567891011121314151617181920212223242526272829303132//fixed定位//1.ios下fixed元素容易定位出错，软键盘弹出时，影响fixed元素定位//2.android下fixed表现要比iOS更好，软键盘弹出时，不会影响fixed元素定位//3.ios4下不支持position:fixed//解决方案：使用[Iscroll](http://cubiq.org/iscroll-5)，如：&lt;div id=\"wrapper\"&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; ..... &lt;/ul&gt;&lt;/div&gt;&lt;script src=\"iscroll.js\"&gt;&lt;/script&gt;&lt;script&gt; var myscroll; function loaded()&#123; myscroll=new iScroll(\"wrapper\"); &#125; window.addEventListener(\"DOMContentLoaded\",loaded,false);&lt;/script&gt; //position定位//Android下弹出软键盘弹出时，影响absolute元素定位//解决方案:var ua = navigator.userAgent.indexOf('Android');if(ua&gt;-1)&#123; $('.ipt').on('focus', function()&#123; $('.css').css(&#123;'visibility':'hidden'&#125;) &#125;).on('blur', function()&#123; $('.css').css(&#123;'visibility':'visible'&#125;) &#125;)&#125; 播放视频不全屏 12345678&lt;!--1.ios7+支持自动播放2.支持Airplay的设备（如：音箱、Apple TV)播放x-webkit-airplay=\"true\" 3.播放视频不全屏webkit-playsinline=\"true\" --&gt;&lt;video x-webkit-airplay=\"true\" webkit-playsinline=\"true\" preload=\"auto\" autoplay src=\"http://\"&gt;&lt;/video&gt; *JS判断设备12345678910111213function deviceType()&#123; var ua = navigator.userAgent; var agent = [\"Android\", \"iPhone\", \"SymbianOS\", \"Windows Phone\", \"iPad\", \"iPod\"]; for(var i=0; i&lt;len,len = agent.length; i++)&#123; if(ua.indexOf(agent[i])&gt;0)&#123; break; &#125; &#125;&#125;deviceType();window.addEventListener('resize', function()&#123; deviceType();&#125;) *JS判断微信浏览器12345678function isWeixin()&#123; var ua = navigator.userAgent.toLowerCase(); if(ua.match(/MicroMessenger/i)=='micromessenger')&#123; return true; &#125;else&#123; return false; &#125;&#125; *android 2.3 bug12345//1.@-webkit-keyframes 需要以0%开始100%结束，0%的百分号不能去掉//2.after和before伪类无法使用动画animation//3.border-radius不支持%单位，如要兼容，可以给radius设置一下较大的值//4.translate百分比的写法和scale在一起会导致失效，例如：-webkit-transform: translate(-50%,-50%) scale(-0.5, 1) android 4.x bug 1234//1.三星 Galaxy S4中自带浏览器不支持border-radius缩写//2.同时设置border-radius和背景色的时候，背景色会溢出到圆角以外部分//3.部分手机(如三星)，a链接支持鼠标:visited事件，也就是说链接访问后文字变为紫色//4.android无法同时播放多音频audio 消除transition闪屏 12345.css &#123; -webkit-transform-style: preserve-3d; -webkit-backface-visibility: hidden; -webkit-perspective: 1000;&#125; *开启硬件加速1234567//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。.css &#123; -webkit-transform: translate3d(0,0,0); -moz-transform: translate3d(0,0,0); -ms-transform: translate3d(0,0,0); transform: translate3d(0,0,0);&#125; 渲染优化123456789//1.禁止使用iframe（阻塞父文档onload事件）//2.禁止使用gif图片实现loading效果（降低CPU消耗，提升渲染性能）//使用CSS3代码代替JS动画；//开启GPU加速；//使用base64位编码图片(不小图而言，大图不建议使用) // 对于一些小图标，可以使用base64位编码，以减少网络请求。但不建议大图使用，比较耗费CPU。小图标优势在于： //1.减少HTTP请求； //2.避免文件跨域； //3.修改及时生效；","categories":[{"name":"优化","slug":"优化","permalink":"https://kingdee88.github.io/categories/优化/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://kingdee88.github.io/tags/前端/"},{"name":"效率","slug":"效率","permalink":"https://kingdee88.github.io/tags/效率/"},{"name":"快捷方式","slug":"快捷方式","permalink":"https://kingdee88.github.io/tags/快捷方式/"}]}]}